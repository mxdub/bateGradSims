fam_ = 'gaussian' # Since data are centered - can use Gaussian model // Check if using raw data, might be better to use Poisson()
slopes = tibble(sex = c('F', 'M', 'F', 'M'),
gamControl = c('Oui', 'Oui', 'Non', 'Non'))
for(sm in names(output_df)){
lm_gamControl = glm(data = output_df[[sm]], rsg ~ (n_gam + msg) * sex, family = fam_)$coefficients
lm_noGamControl = glm(data = output_df[[sm]], rsg ~ (msg) * sex, family = fam_)$coefficients
slopes[[sm]] = c(lm_gamControl[['msg']], lm_gamControl[['msg']]+ lm_gamControl[['msg:sexM']],
lm_noGamControl[['msg']], lm_noGamControl[['msg']] + lm_noGamControl[['msg:sexM']])
}
for(sm in names(output_df)[-1])
slopes[[paste0('delta_', sm)]] = slopes[[sm]] - slopes[['base']]
slopes %>% knitr::kable()
dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble()
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble(.name_repair = 'minimal') %>%
add_rownames() %>%
pivot_longer(-rowname)
tp
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble(.name_repair = "unique") %>%
add_rownames() %>%
pivot_longer(-rowname)
tp
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble(.name_repair = "check_unique") %>%
add_rownames() %>%
pivot_longer(-rowname)
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble(.name_repair = "universal") %>%
add_rownames() %>%
pivot_longer(-rowname)
library(bateGradSims)
help("pollen_export")
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
# gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_export = function(n_males = 100, n_females = NULL, baseline_alpha = NULL,
pollen_repartition = c(0.01), plot = F, gametes_by_male){
if(is.null(baseline_alpha) & is.null(n_females))
stop("One of baseline_alpha or n_females must be provided")
if(is.null(baseline_alpha))
baseline_alpha = rep(1, n_females)
if(is.null(n_females))
n_females = length(baseline_alpha)
# Check alpha_0 for Dirichlet
if(length(pollen_repartition) == 1){
male_gamete_export_heterogeneity = rep(pollen_repartition, n_males)
}else if(length(pollen_repartition) == n_males){
male_gamete_export_heterogeneity = 10^pollen_repartition
}else if( is.list(pollen_repartition) & all(c('mean', 'sd') %in% names(pollen_repartition)) ){
male_gamete_export_heterogeneity = 10^do.call(rnorm, c(list(n_males), pollen_repartition))
}else{
stop('Argument pollen_repartition is badly formatted, check help("pollen_export")')
}
dirichlet_draw = sapply(male_gamete_export_heterogeneity, FUN = function(x) rdirichlet(1, alpha = baseline_alpha * x) )
male_gamete_repartition = matrix(nrow = n_females, ncol = n_males)
for(i in 1:n_males)
male_gamete_repartition[,i] = rmultinom(1, gametes_by_male[i], dirichlet_draw[,i])
if(plot){
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble() %>%
rownames_to_column() %>%
pivot_longer(-rowname)
distrib_ = ggplot(tp, aes(x = name, y = value, fill = rowname))+
geom_bar(stat = 'identity', color="black")+
coord_flip()+
theme(legend.position = 'none')+
labs(x = "Males", y = "Pollen repartition among females")
hist_ = ggplot(tibble(cnt = apply(male_gamete_repartition, 2, FUN = function(x) sum(x>0))), aes(x=cnt))+
geom_histogram()+
labs(x = "Number of females", y = "")
print(plot_grid(distrib_, hist_, ncol = 2))
}
return(male_gamete_repartition)
}
pollen_export()
pollen_export = function(n_males = 100, n_females = NULL, baseline_alpha = NULL,
pollen_repartition = c(0.01), plot = F, gametes_by_male){
print(gametes_by_male)
if(is.null(baseline_alpha) & is.null(n_females))
stop("One of baseline_alpha or n_females must be provided")
if(is.null(baseline_alpha))
baseline_alpha = rep(1, n_females)
if(is.null(n_females))
n_females = length(baseline_alpha)
# Check alpha_0 for Dirichlet
if(length(pollen_repartition) == 1){
male_gamete_export_heterogeneity = rep(pollen_repartition, n_males)
}else if(length(pollen_repartition) == n_males){
male_gamete_export_heterogeneity = 10^pollen_repartition
}else if( is.list(pollen_repartition) & all(c('mean', 'sd') %in% names(pollen_repartition)) ){
male_gamete_export_heterogeneity = 10^do.call(rnorm, c(list(n_males), pollen_repartition))
}else{
stop('Argument pollen_repartition is badly formatted, check help("pollen_export")')
}
dirichlet_draw = sapply(male_gamete_export_heterogeneity, FUN = function(x) rdirichlet(1, alpha = baseline_alpha * x) )
male_gamete_repartition = matrix(nrow = n_females, ncol = n_males)
for(i in 1:n_males)
male_gamete_repartition[,i] = rmultinom(1, gametes_by_male[i], dirichlet_draw[,i])
if(plot){
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble() %>%
rownames_to_column() %>%
pivot_longer(-rowname)
distrib_ = ggplot(tp, aes(x = name, y = value, fill = rowname))+
geom_bar(stat = 'identity', color="black")+
coord_flip()+
theme(legend.position = 'none')+
labs(x = "Males", y = "Pollen repartition among females")
hist_ = ggplot(tibble(cnt = apply(male_gamete_repartition, 2, FUN = function(x) sum(x>0))), aes(x=cnt))+
geom_histogram()+
labs(x = "Number of females", y = "")
print(plot_grid(distrib_, hist_, ncol = 2))
}
return(male_gamete_repartition)
}
pollen_export()
pollen_export = function(n_males = 100, n_females = NULL, baseline_alpha = NULL,
pollen_repartition = c(0.01), plot = F, gametes_by_male){
if(is.null(baseline_alpha) & is.null(n_females))
stop("One of baseline_alpha or n_females must be provided")
if(is.null(baseline_alpha))
baseline_alpha = rep(1, n_females)
if(is.null(n_females))
n_females = length(baseline_alpha)
# Check alpha_0 for Dirichlet
if(length(pollen_repartition) == 1){
male_gamete_export_heterogeneity = rep(pollen_repartition, n_males)
}else if(length(pollen_repartition) == n_males){
male_gamete_export_heterogeneity = 10^pollen_repartition
}else if( is.list(pollen_repartition) & all(c('mean', 'sd') %in% names(pollen_repartition)) ){
male_gamete_export_heterogeneity = 10^do.call(rnorm, c(list(n_males), pollen_repartition))
}else{
stop('Argument pollen_repartition is badly formatted, check help("pollen_export")')
}
dirichlet_draw = sapply(male_gamete_export_heterogeneity, FUN = function(x) rdirichlet(1, alpha = baseline_alpha * x) )
male_gamete_repartition = matrix(nrow = n_females, ncol = n_males)
for(i in 1:n_males)
male_gamete_repartition[,i] = rmultinom(1, gametes_by_male[i], dirichlet_draw[,i])
if(plot){
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble() %>%
rownames_to_column() %>%
pivot_longer(-rowname)
distrib_ = ggplot(tp, aes(x = name, y = value, fill = rowname))+
geom_bar(stat = 'identity', color="black")+
coord_flip()+
theme(legend.position = 'none')+
labs(x = "Males", y = "Pollen repartition among females")
hist_ = ggplot(tibble(cnt = apply(male_gamete_repartition, 2, FUN = function(x) sum(x>0))), aes(x=cnt))+
geom_histogram()+
labs(x = "Number of females", y = "")
print(plot_grid(distrib_, hist_, ncol = 2))
}
return(male_gamete_repartition)
}
pollen_export()
pollen_export(n_females = 50)
usethis::use_mit_license()
library(bateGradSims)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
# gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
# gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -1, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
help("pollen_export")
help("gametes_drawing")
help("get_male_comp_values")
library(bateGradSims)
help("gametes_drawing")
help("pollen_export")
library(bateGradSims)
library(gtools)
library(tidyverse)
library(cowplot)
#####################
n_female = 250
n_male = 100
n_gamete_fem = 50
ratio_gamete = 10 # How many more gamete male produced
# Number of gamete for each male
gamete_by_male = rpois(n_male, lambda = ratio_gamete * n_gamete_fem)
cv_gamete_male = 0.1 # Coefficient of variation - as % (e.g., 0.1 => 10%)
gamete_by_male = pmax(0, round(rnorm(n_male,
mean = ratio_gamete * n_gamete_fem,
sd = (cv_gamete_male * ratio_gamete * n_gamete_fem) )))
# Use Quasi Poisson or Negative binomiale instead ?
# Number of gamete for each female
gamete_by_female = rpois(n_female, lambda = n_gamete_fem)
# Same question, qPoisson / nBinom ?
# Male competitive effect
comp_strength = 0 # 0 no comp, more, more compet
male_comp = rnorm(n_male, 1, comp_strength)
male_comp = male_comp - min(male_comp, 0) + 0.01
hist(male_comp)
# Draw gamete export distribution
# From low value, e.g., 0.01 -> very high heterogeneity almost only one female pollinated, to high value, e.g., 100 -> homogeneous
# Note, it could be a vector instead of unique value (i.e. if heterogenity depends on male identity)
pollen_repartition = 0.01
# pollen_repartition = list(mean = -1, sd = 0.75)
# pollen_repartition = list(-1, 0.75)
male_gamete_export_heterogeneity = rep(pollen_repartition, n_male)
# male_gamete_export_heterogeneity = 10^rnorm(n_male, -1, 0.75)
# Could include some variability among female for 'receptivity'/'attractivness' ?
base_line_alpha = rep(1, n_female)
dirichlet_draw = sapply(male_gamete_export_heterogeneity, FUN = function(x) gtools::rdirichlet(1, alpha = base_line_alpha * x) )
male_gamete_repartition = matrix(nrow = n_female, ncol = n_male)
for(i in 1:n_male)
male_gamete_repartition[,i] = rmultinom(1, gamete_by_male[i], dirichlet_draw[,i])
tp = dirichlet_draw[,sample(dim(dirichlet_draw)[2], 10)] %>%
as_tibble() %>%
add_rownames() %>%
pivot_longer(-rowname)
ggplot(tp, aes(x = name, y = value, fill = rowname))+
geom_bar(stat = 'identity', color="black")+
coord_flip()+
theme(legend.position = 'none')+
labs(x = "Males", y = "Pollen repartition among females")
hist(apply(male_gamete_repartition, 2, FUN = function(x) sum(x>0)))
# New sample method
sample_handmade = function(x, size, prob = NULL){
if(length(x) == 0 || size == 0 || is.na(size)) return(NULL)
if(length(x) == 1) return(x)
sample(x, size = min(length(x), size), prob = prob)
}
male_gamete_repartition
pollen_repartition
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
mso_female
mso_male
gametes
dim(pollen_repartition)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
dim(pollen_repartition)
male_comp_values
gametes$gam_male
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
# pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition
dim(pollen_repartition)
library(bateGradSims)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
library(bateGradSims)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
pollen_repartition
dim(pollen_export())
dim(pollen_repartition)
?sample
library(bateGradSims)
library(bateGradSims)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
male_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
pollen_competi
library(bateGradSims)
# Pollen competition, i.e., who fertilized who
bateGradSims::pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
# Pollen competition, i.e., who fertilized who
pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
# Pollen competition, i.e., who fertilized who
fertilized_eggs = pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
fertilized_eggs
