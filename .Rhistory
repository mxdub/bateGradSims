msg = c(msg_female, msg_male),
rsg = c(rsg_female, rsg_male),
n_gam = c(gamete_by_female, gamete_by_male),
sex = c(rep("F", n_female), rep("M", n_male)),
sampling_method = "base") %>%
group_by(sex) %>%
mutate_at(vars(mso:rsg), ~ .x / mean(.x, na.rm = T)) # Might be dependent on a condition
n_geno = 6000
for( sm in c('abs', 'pr', 'rd') ){
if(sm == 'abs'){
smpl = sampling_abs(n_genotypage = n_geno, undercount_female = 'remove')
}else if(sm == 'pr'){
smpl = sampling_prorata(n_genotypage = n_geno, min_threshold = 5,  undercount_female = 'remove_and_upsample', upsample_strategy = "m1")
}else if(sm == 'rd'){
smpl = sampling_random(n_genotypage = n_geno)
}
output_df[[sm]] = tibble(mso = c(mso_female, mso_male),
msg = c(smpl$msg_female, smpl$msg_male),
rsg = c(smpl$rsg_female, smpl$rsg_male),
n_gam = c(gamete_by_female, gamete_by_male),
sex = c(rep("F", n_female), rep("M", n_male)),
sampling_method = sm)%>%
group_by(sex) %>%
mutate_at(vars(mso:rsg), ~ .x / mean(.x, na.rm = T)) # Might be dependent on a condition
}
plot_grid(
plot_grid(
ggplot(output_df[['base']], aes(x = msg, y = rsg, color = sex))+
geom_point()+
geom_smooth(method='lm'),
ggplot(output_df[['base']], aes(x = mso, y = rsg, color = sex))+
geom_point()+
geom_smooth(method='lm'),
ncol = 2
),
plot_grid(
ggplot(output_df[['abs']], aes(x = msg, y = rsg, color = sex))+
geom_point()+
geom_smooth(method='lm')+
theme(legend.position = 'none'),
ggplot(output_df[['pr']], aes(x = msg, y = rsg, color = sex))+
geom_point()+
geom_smooth(method='lm')+
theme(legend.position = 'none'),
ggplot(output_df[['rd']], aes(x = msg, y = rsg, color = sex))+
geom_point()+
geom_smooth(method='lm')+
theme(legend.position = 'none'),
ncol = 3),
ncol = 1
)
# Limitation pollinique
print(paste0("Pollen limitation : ", round(100*(1-sum(rsg_female)/sum(gamete_by_female)), 2), " % of eggs are unfertilized"))
fam_ = 'gaussian' # Since data are centered - can use Gaussian model // Check if using raw data, might be better to use Poisson()
slopes = tibble(sex = c('F', 'M', 'F', 'M'),
gamControl = c('Oui', 'Oui', 'Non', 'Non'))
for(sm in names(output_df)){
lm_gamControl = glm(data = output_df[[sm]], rsg ~ (n_gam + msg) * sex, family = fam_)$coefficients
lm_noGamControl = glm(data = output_df[[sm]], rsg ~ (msg) * sex, family = fam_)$coefficients
slopes[[sm]] = c(lm_gamControl[['msg']], lm_gamControl[['msg']]+ lm_gamControl[['msg:sexM']],
lm_noGamControl[['msg']], lm_noGamControl[['msg']] + lm_noGamControl[['msg:sexM']])
}
for(sm in names(output_df)[-1])
slopes[[paste0('delta_', sm)]] = slopes[[sm]] - slopes[['base']]
slopes %>% knitr::kable()
# Not really sampling, exact RS/MS
sampling_groundtruth = function( fertilized_eggs, n_males){
msg_female = unlist(lapply(fertilized_eggs, FUN = function(x) length(unique(x)) ))
rsg_female = unlist(lapply(fertilized_eggs, length))
msg_male = rep(0, n_males)
rsg_male = rep(0, n_males)
for(m in 1:n_males){
msg_male[m] = sum(unlist(lapply(fertilized_eggs, FUN = function(x) m %in% x )))
rsg_male[m] = sum(unlist(fertilized_eggs) == m)
}
return(list(msg_female = msg_female,
rsg_female = rsg_female,
msg_male = msg_male,
rsg_male = rsg_male))
}
sampling_groundtruth(female_desc, n_male)
n_female
n_male
??gtools
?gtools
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
fertilized_eggs = pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
library(bateGradSims)
sampling_groundtruth(fertilized_eggs, n_males)
do.call
?do.call
rnorm(c(10, list(mean = -2, sd = 0.2)))
rnorm(c(10, list(mean = -2, sd = 0.2)))
c(10, list(mean = -2, sd = 0.2))
c(list(10), list(mean = -2, sd = 0.2))
c(list(n=10), list(mean = -2, sd = 0.2))
rnotm(c(list(n=10), list(mean = -2, sd = 0.2)))
rnorm(c(list(n=10), list(mean = -2, sd = 0.2)))
rnorm(c(list(n=100), list(mean = -2, sd = 0.2)))
rnorm(c(list(mean = -2, sd = 0.2)))
rnorm()
do.call(rnorm, c(list(n_males), pollen_repartition
do.call(rnorm, c(list(n_males), pollen_repartition))
do.call(rnorm, c(list(n_males), pollen_repartition))
do.call(rnorm, c(list(1), list(mean=-2, sd=0.2)))
do.call(rnorm, c(list(10), list(mean=-2, sd=0.2)))
hist(do.call(rnorm, c(list(10), list(mean=-2, sd=0.2))))
hist(do.call(rnorm, c(list(1000), list(mean=-2, sd=0.2))))
hist(do.call(rnorm, c(list(10000), list(mean=-2, sd=0.2))))
?floor
floor(.3)
floor(.7)
library(bateGradSims)
library(bateGradSims)
sampling_fixed(fertilized_eggs, n_males)
lapply(fertilized_eggs, length)
unlist(lapply(fertilized_eggs, length))
sort(unlist(lapply(fertilized_eggs, length)))
100*40
sampling_fixed(fertilized_eggs, n_males, by_female_samples = 40)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
fertilized_eggs = pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
sampling_groundtruth(fertilized_eggs, n_males)
sampling_fixed(fertilized_eggs, n_males, by_female_samples = 40)
library(bateGradSims)
n_females = 100
n_males = 110
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
fertilized_eggs = pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
sampling_groundtruth(fertilized_eggs, n_males)
sampling_fixed(fertilized_eggs, n_males, by_female_samples = 50)
sampling_fixed(fertilized_eggs, n_males, by_female_samples = 50, undercount_female = 'keep')
help("sampling_fixed")
library(bateGradSims)
sampling_prorata(fertilized_eggs, n_males)
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.2)
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.3)
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.3, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.1, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.1, min_threshold = 10, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.1, min_threshold = 5, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, by_female_prop = 0.1, min_threshold = 2, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 2, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 3, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 4, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 5, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 10, undercount_female = 'remove_and_upsample')
library(bateGradSims)
help("sampling_prorata")
library(bateGradSims)
n_females = 100
n_males = 50
n_gamete_fem = 50
ratio_gamete = 10
cv_normal_male = 0.1
# Get gametes
gametes = gametes_drawing(n_females = n_females, n_males = n_males,
mean_gamete_female = n_gamete_fem, ratio_gamete = ratio_gamete,
male_distrib_params = cv_normal_male)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Mating Success (exact) can then be computed from the pollen_repartition, e.g.,
mso_female = apply(pollen_repartition, 1, FUN = function(x) sum(x>0) )
mso_male = apply(pollen_repartition, 2, FUN = function(x) sum(x>0) )
# Pollen competition, i.e., who fertilized who
fertilized_eggs = pollen_competition(pollen_repartition, males_comp_values, gametes$gam_female)
sampling_groundtruth(fertilized_eggs, n_males)
sampling_fixed(fertilized_eggs, n_males, by_female_samples = 50, undercount_female = 'keep')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 10, undercount_female = 'remove_and_upsample')
sampling_prorata(fertilized_eggs, n_males, min_threshold = 10, undercount_female = 'remove_and_upsample', upsample_strategy = 's2')
help("sampling_prorata")
# Get pollen repartition
pollen_repartition = pollen_export(n_females = n_females,
gametes_by_male = gametes$gam_male,
pollen_repartition = list(mean = -2, sd = 0.2),
plot = T)
# Get males comp. values
males_comp_values = get_male_comp_values(n_males = n_males, sd_comp = 10, plot = T)
help("get_male_comp_values")
rnorm(1000)
rnorm(1000, mean = 100, sd = 10)
#### Tests avec CV #####
cv = 0.1
mean = 100
sd = mean * cv
rnorm(10000, mean, sd)
var(rnorm(10000, mean, sd))
var(rnorm(1000, mean, sd))
cv = 0.1
mean = 100
sd = mean * cv
var(rnorm(10000, mean, sd))
cv = 0.1
mean = 100
sd = mean * cv
var(rnorm(10000, mean, sd))
var(rnorm(100000, mean, sd))
mean = 200
sd = mean * cv
var(rnorm(100000, mean, sd))
x = rnorm(100000, mean, sd)
quantile(x)
quantile(x, c(0.025, 0.0975))
quantile(x, c(0.025, 0.975))
quantile(x, c(0.975))
quantile(x, c(0.975)) - quantile(x, c(0.025))
quantile(x, c(0.975)) - quantile(x, c(0.025))
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
quantile(x, c(0.975)) - quantile(x, c(0.025))
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
source("~/home_projets/Bateman Gradient/testing.R", encoding = 'UTF-8', echo=TRUE)
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 0.2
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
hist(x)
cv = 1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
cv = 1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
cv = 1
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
cv = 1
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
cv = 1
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 1
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
cv = 1
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.975)) - quantile(x, c(0.025)))[[1]]
c(quantile(x, c(0.975)) / quantile(x, c(0.025)))[[1]]
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
cv = 0.7
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
cv = 0.5
mean = 1000
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
quantile(x, c(0.025))
#### Tests avec CV #####
cv = 0.1
mean = 100
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 200
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
cv = 0.2
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
#### Tests avec CV #####
cv = 0.3
mean = 500
sd = mean * cv
x = rnorm(100000, mean, sd)
hist(x)
c(quantile(x, c(0.025)) / quantile(x, c(0.975)))[[1]]
c(quantile(x, c(0.01)) / quantile(x, c(0.99)))[[1]]
